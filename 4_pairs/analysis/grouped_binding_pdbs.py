import MDAnalysis as mda
import os
os.environ['OMP_NUM_THREADS'] = '1'
import pandas as pd
#Ignore warnings
import warnings
warnings.filterwarnings("ignore")

# Path to the CSV file generated by write_equivalent_binding_sites.py
csv_path = '/martini/rubiz/Github/PsbS_Binding_Site/5_psii/binding_sites/trj/basenames_equivalent_chains.csv'

# Directory for input PDBs
pdb_dir = '/martini/rubiz/Github/PsbS_Binding_Site/5_psii/binding_sites/trj'

# Read the CSV
df = pd.read_csv(csv_path,header=0,sep=' ')



for index, row in df.iterrows():
    chains_str = row['tag']  # First column: chains (e.g., 'A1_A2')
    basename = row['original']    # Second column: basename (e.g., 'sim_1_A2_Z')

    # Input PDB path
    pdb_path = os.path.join(pdb_dir, f'{basename}.pdb')

    # Output grouped PDB path
    grouped_pdb_path = os.path.join(pdb_dir, f'{basename}_grouped.pdb')
    
    if not os.path.exists(pdb_path):
        print(f"Warning: {pdb_path} not found, skipping.")
        continue
    
    # Load the universe
    u = mda.Universe(pdb_path)

    if u.atoms.n_atoms == 0:
        print(f"Warning: {pdb_path} has no atoms, skipping.")
        continue

    print(chains_str)
    sel_chain = chains_str.split('_')
    sel_chain = " ".join(sel_chain)



    # Select atoms from the specified chains
    str_sel = f'chainID {sel_chain}'
    sel = u.select_atoms(str_sel)

    if sel.n_atoms == 0:
        print(f"Warning: No atoms found for selection '{str_sel}' in {pdb_path}, skipping.")
        continue
    
    # Write the selected atoms to a new PDB
    sel.write(grouped_pdb_path)
    
    print(f"Created grouped PDB: {grouped_pdb_path}")

print("Grouping completed.")