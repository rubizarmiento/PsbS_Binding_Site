import MDAnalysis as mda
import os
import sys
os.environ['OMP_NUM_THREADS'] = '1'
import pandas as pd
#Ignore warnings
import warnings
import glob

warnings.filterwarnings("ignore")

pdb_dir=sys.argv[1]
print(f"Processing directory: {pdb_dir}")



# Path to the CSV file generated by write_equivalent_binding_sites.py
csv_path = '/martini/rubiz/Github/PsbS_Binding_Site/5_psii/binding_sites/trj/basenames_equivalent_chains.csv'

# Read the CSV
df = pd.read_csv(csv_path,header=0,sep=' ')

# Drop duplicated tag rows, keeping the first occurrence
df = df.drop_duplicates(subset=['tag'], keep='first')

for index, row in df.iterrows():
    chains_str = row['tag']  # First column: chains (e.g., 'A1_A2')
    basename = row['original']    # Second column: basename (e.g., 'sim_1_A2_Z')
    tag_number = row['tag_number']
    old_chains_str = row['new']
    output = row['old_chains']
    # Input PDB path
    pdb_pattern = os.path.join(pdb_dir, f'fix_*{basename}.pdb')
    pdb_files = glob.glob(pdb_pattern)
    if not pdb_files:
        print(f"Warning: No files found matching pattern {pdb_pattern}, skipping.")
        continue

    pdb_path = pdb_files[0]  # Use the first matching file

    # Output grouped PDB path
    grouped_pdb_path = os.path.join(pdb_dir, f'{tag_number}_{output}_grouped.pdb')
    
    if not os.path.exists(pdb_path):
        print(f"Warning: {pdb_path} not found, skipping.")
        continue
    
    # Load the universe
    u = mda.Universe(pdb_path)

    if u.atoms.n_atoms == 0:
        print(f"Warning: {pdb_path} has no atoms, skipping.")
        continue

    sel = chains_str.split('_')
    sel_new = old_chains_str.split('_')

    # Dictionary to map new chains to old chains
    chain_map = dict(zip(sel, sel_new))

    



    # Change chainIDs
    for atom in u.atoms:
        if atom.chainID in chain_map:
            atom.chainID = chain_map[atom.chainID]


    
    # Write the selected atoms to a new PDB
    u.select_atoms("all").write(grouped_pdb_path)
    
    print(f"Created grouped PDB: {grouped_pdb_path}")

print("Grouping completed.")